package com.example.lawyerapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.lawyerapp.Logs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOGS.
*/
public class LogsDao extends AbstractDao<Logs, Long> {

    public static final String TABLENAME = "LOGS";

    /**
     * Properties of entity Logs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ParentID = new Property(1, Long.class, "parentID", false, "PARENT_ID");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property Notes = new Property(3, String.class, "notes", false, "NOTES");
        public final static Property Expenses = new Property(4, Float.class, "expenses", false, "EXPENSES");
        public final static Property Mileage = new Property(5, Float.class, "mileage", false, "MILEAGE");
        public final static Property Hours = new Property(6, Float.class, "hours", false, "HOURS");
    };


    public LogsDao(DaoConfig config) {
        super(config);
    }
    
    public LogsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOGS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PARENT_ID' INTEGER," + // 1: parentID
                "'DATE' INTEGER," + // 2: date
                "'NOTES' TEXT," + // 3: notes
                "'EXPENSES' REAL," + // 4: expenses
                "'MILEAGE' REAL," + // 5: mileage
                "'HOURS' REAL);"); // 6: hours
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOGS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Logs entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long parentID = entity.getParentID();
        if (parentID != null) {
            stmt.bindLong(2, parentID);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(4, notes);
        }
 
        Float expenses = entity.getExpenses();
        if (expenses != null) {
            stmt.bindDouble(5, expenses);
        }
 
        Float mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindDouble(6, mileage);
        }
 
        Float hours = entity.getHours();
        if (hours != null) {
            stmt.bindDouble(7, hours);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Logs readEntity(Cursor cursor, int offset) {
        Logs entity = new Logs( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // parentID
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // notes
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // expenses
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // mileage
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6) // hours
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Logs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParentID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setNotes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpenses(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setMileage(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setHours(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Logs entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Logs entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
